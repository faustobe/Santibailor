plugins {
    id 'com.android.application'
    id 'androidx.navigation.safeargs'
    id 'dagger.hilt.android.plugin'
}

android {
    namespace 'it.faustobe.santibailor'
    compileSdk 34

    defaultConfig {
        applicationId "it.faustobe.santibailor"
        minSdk 24
        targetSdk 34
        versionCode 2
        versionName "1.0.1"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            debuggable true
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:deprecation"
    }
    buildFeatures {
        viewBinding true
    }
}

dependencies {
    def room_version = "2.6.0"
    implementation libs.androidx.room.runtime
    annotationProcessor "androidx.room:room-compiler:$room_version"
    implementation libs.androidx.room.ktx

    def lifecycle_version = "2.6.2"
    implementation "androidx.lifecycle:lifecycle-viewmodel:$lifecycle_version"
    implementation libs.androidx.lifecycle.livedata
    implementation "androidx.lifecycle:lifecycle-runtime:$lifecycle_version"
    implementation libs.androidx.lifecycle.viewmodel.savedstate
    implementation libs.androidx.lifecycle.common.java8
    implementation libs.androidx.appcompat.v161
    implementation libs.material.v150
    implementation libs.androidx.drawerlayout
    implementation libs.androidx.fragment

    def glide_version = "4.15.1"
    implementation libs.glide
    annotationProcessor "com.github.bumptech.glide:compiler:$glide_version"

    implementation libs.appcompat
    implementation libs.material
    implementation libs.constraintlayout
    implementation libs.lifecycle.livedata.ktx
    implementation libs.lifecycle.viewmodel.ktx
    implementation libs.navigation.fragment
    implementation libs.navigation.ui
    //implementation(libs.material.calendarview)
    androidTestImplementation libs.ext.junit
    androidTestImplementation libs.espresso.core
    // JUnit 4 framework
    testImplementation libs.junit
    // Mockito per il mocking degli oggetti
    testImplementation libs.mockito.core
    // AndroidX Test Core library
    testImplementation libs.androidx.core
    // AndroidX Test - JVM testing utilities
    testImplementation libs.androidx.core.testing
    // mockito-inline
    testImplementation libs.mockito.inline
    // simula ambiente android
    testImplementation libs.robolectric

    implementation libs.gson

    //def nav_version = "2.7.7"
    implementation libs.androidx.fragment.v155

    //def hil_version = "2.44"
    implementation libs.hilt.android
    annotationProcessor libs.hilt.compiler

    // Per i test con Hilt (opzionale, ma consigliato)
    testImplementation libs.hilt.android.testing
    testAnnotationProcessor libs.hilt.compiler

    def nav_version = "2.8.0"

    // Jetpack Compose Integration
    implementation "androidx.navigation:navigation-compose:$nav_version"

    // Views/Fragments Integration
    implementation "androidx.navigation:navigation-fragment:$nav_version"
    implementation "androidx.navigation:navigation-ui:$nav_version"

    // Feature module support for Fragments
    implementation "androidx.navigation:navigation-dynamic-features-fragment:$nav_version"

    // Testing Navigation
    androidTestImplementation "androidx.navigation:navigation-testing:$nav_version"

}

task printNavFiles {
    doLast {
        android.applicationVariants.all { variant ->
            def taskName = "generateSafeArgs${variant.name.capitalize()}"
            def task = tasks.findByName(taskName)
            if (task != null) {
                println "Navigation files for ${variant.name}:"
                task.inputs.files.each { file ->
                    if (file.name.endsWith('.xml')) {
                        println " - ${file.absolutePath}"
                    }
                }
            } else {
                println "Task $taskName not found. Safe Args might not be properly configured."
            }
        }
    }
}