// File creato il: 2024-09-24 08:32:58

// Contenuto di app/build.gradle

plugins {
    id 'com.android.application'
    id 'androidx.navigation.safeargs'
    id 'dagger.hilt.android.plugin'
}

android {
    namespace 'it.faustobe.santibailor'
    compileSdk 34

    defaultConfig {
        applicationId "it.faustobe.santibailor"
        minSdk 24
        targetSdk 34
        versionCode 2
        versionName "1.0.1"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            debuggable true
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:deprecation"
    }
    buildFeatures {
        viewBinding true
    }
}

dependencies {
    def room_version = "2.6.0"
    implementation libs.androidx.room.runtime
    annotationProcessor "androidx.room:room-compiler:$room_version"
    implementation libs.androidx.room.ktx

    def lifecycle_version = "2.6.2"
    implementation "androidx.lifecycle:lifecycle-viewmodel:$lifecycle_version"
    implementation libs.androidx.lifecycle.livedata
    implementation "androidx.lifecycle:lifecycle-runtime:$lifecycle_version"
    implementation libs.androidx.lifecycle.viewmodel.savedstate
    implementation libs.androidx.lifecycle.common.java8
    implementation libs.androidx.appcompat.v161
    implementation libs.material.v150
    implementation libs.androidx.drawerlayout
    implementation libs.androidx.fragment

    def glide_version = "4.15.1"
    implementation libs.glide
    annotationProcessor "com.github.bumptech.glide:compiler:$glide_version"

    implementation libs.appcompat
    implementation libs.material
    implementation libs.constraintlayout
    implementation libs.lifecycle.livedata.ktx
    implementation libs.lifecycle.viewmodel.ktx
    implementation libs.navigation.fragment
    implementation libs.navigation.ui
    //implementation(libs.material.calendarview)
    androidTestImplementation libs.ext.junit
    androidTestImplementation libs.espresso.core
    // JUnit 4 framework
    testImplementation libs.junit
    // Mockito per il mocking degli oggetti
    testImplementation libs.mockito.core
    // AndroidX Test Core library
    testImplementation libs.androidx.core
    // AndroidX Test - JVM testing utilities
    testImplementation libs.androidx.core.testing
    // mockito-inline
    testImplementation libs.mockito.inline
    // simula ambiente android
    testImplementation libs.robolectric

    implementation libs.gson

    //def nav_version = "2.7.7"
    implementation libs.androidx.fragment.v155

    //def hil_version = "2.44"
    implementation libs.hilt.android
    annotationProcessor libs.hilt.compiler

    // Per i test con Hilt (opzionale, ma consigliato)
    testImplementation libs.hilt.android.testing
    testAnnotationProcessor libs.hilt.compiler

    def nav_version = "2.8.0"

    // Jetpack Compose Integration
    implementation "androidx.navigation:navigation-compose:$nav_version"

    // Views/Fragments Integration
    implementation "androidx.navigation:navigation-fragment:$nav_version"
    implementation "androidx.navigation:navigation-ui:$nav_version"

    // Feature module support for Fragments
    implementation "androidx.navigation:navigation-dynamic-features-fragment:$nav_version"

    // Testing Navigation
    androidTestImplementation "androidx.navigation:navigation-testing:$nav_version"

}

// Contenuto di test/TestFragment.java

package it.faustobe.santibailor.presentation.features.test;

import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.fragment.app.Fragment;

import it.faustobe.santibailor.R;

public class TestFragment extends Fragment {

    @Nullable
    @Override
    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
        return inflater.inflate(R.layout.fragment_test, container, false);
    }

    @Override
    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {
        super.onViewCreated(view, savedInstanceState);

        // Recupera l'argomento usando Safe Args
        int testArg = TestFragmentArgs.fromBundle(getArguments()).getTestArg();

        // Visualizza l'argomento in un TextView
        TextView textView = view.findViewById(R.id.testTextView);
        textView.setText(String.valueOf(testArg));
    }
}

// Contenuto di test/TestFragmentArgs.java

package it.faustobe.santibailor.presentation.features.test;

import android.os.Bundle;
import androidx.annotation.NonNull;
import androidx.lifecycle.SavedStateHandle;
import androidx.navigation.NavArgs;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.HashMap;

public class TestFragmentArgs implements NavArgs {
  private final HashMap arguments = new HashMap();

  private TestFragmentArgs() {
  }

  @SuppressWarnings("unchecked")
  private TestFragmentArgs(HashMap argumentsMap) {
    this.arguments.putAll(argumentsMap);
  }

  @NonNull
  @SuppressWarnings("unchecked")
  public static TestFragmentArgs fromBundle(@NonNull Bundle bundle) {
    TestFragmentArgs __result = new TestFragmentArgs();
    bundle.setClassLoader(TestFragmentArgs.class.getClassLoader());
    if (bundle.containsKey("testArg")) {
      int testArg;
      testArg = bundle.getInt("testArg");
      __result.arguments.put("testArg", testArg);
    } else {
      __result.arguments.put("testArg", 0);
    }
    return __result;
  }

  @NonNull
  @SuppressWarnings("unchecked")
  public static TestFragmentArgs fromSavedStateHandle(@NonNull SavedStateHandle savedStateHandle) {
    TestFragmentArgs __result = new TestFragmentArgs();
    if (savedStateHandle.contains("testArg")) {
      int testArg;
      testArg = savedStateHandle.get("testArg");
      __result.arguments.put("testArg", testArg);
    } else {
      __result.arguments.put("testArg", 0);
    }
    return __result;
  }

  @SuppressWarnings("unchecked")
  public int getTestArg() {
    return (int) arguments.get("testArg");
  }

  @SuppressWarnings("unchecked")
  @NonNull
  public Bundle toBundle() {
    Bundle __result = new Bundle();
    if (arguments.containsKey("testArg")) {
      int testArg = (int) arguments.get("testArg");
      __result.putInt("testArg", testArg);
    } else {
      __result.putInt("testArg", 0);
    }
    return __result;
  }

  @SuppressWarnings("unchecked")
  @NonNull
  public SavedStateHandle toSavedStateHandle() {
    SavedStateHandle __result = new SavedStateHandle();
    if (arguments.containsKey("testArg")) {
      int testArg = (int) arguments.get("testArg");
      __result.set("testArg", testArg);
    } else {
      __result.set("testArg", 0);
    }
    return __result;
  }

  @Override
  public boolean equals(Object object) {
    if (this == object) {
        return true;
    }
    if (object == null || getClass() != object.getClass()) {
        return false;
    }
    TestFragmentArgs that = (TestFragmentArgs) object;
    if (arguments.containsKey("testArg") != that.arguments.containsKey("testArg")) {
      return false;
    }
    if (getTestArg() != that.getTestArg()) {
      return false;
    }
    return true;
  }

  @Override
  public int hashCode() {
    int result = 1;
    result = 31 * result + getTestArg();
    return result;
  }

  @Override
  public String toString() {
    return "TestFragmentArgs{"
        + "testArg=" + getTestArg()
        + "}";
  }

  public static final class Builder {
    private final HashMap arguments = new HashMap();

    @SuppressWarnings("unchecked")
    public Builder(@NonNull TestFragmentArgs original) {
      this.arguments.putAll(original.arguments);
    }

    public Builder() {
    }

    @NonNull
    public TestFragmentArgs build() {
      TestFragmentArgs result = new TestFragmentArgs(arguments);
      return result;
    }

    @NonNull
    @SuppressWarnings("unchecked")
    public Builder setTestArg(int testArg) {
      this.arguments.put("testArg", testArg);
      return this;
    }

    @SuppressWarnings({"unchecked","GetterOnBuilder"})
    public int getTestArg() {
      return (int) arguments.get("testArg");
    }
  }
}


// Contenuto di settings/SettingsFragment.java

package it.faustobe.santibailor.presentation.features.settings;

import android.os.Bundle;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewGroup;

import androidx.activity.OnBackPressedCallback;
import androidx.annotation.NonNull;
import androidx.appcompat.app.ActionBar;
import androidx.appcompat.app.AppCompatActivity;
import androidx.core.view.MenuProvider;
import androidx.fragment.app.Fragment;
import androidx.lifecycle.Lifecycle;
import androidx.navigation.NavController;
import androidx.navigation.NavDirections;
import androidx.navigation.Navigation;

import java.util.ArrayList;
import java.util.List;

import it.faustobe.santibailor.R;
import it.faustobe.santibailor.databinding.FragmentSettingsBinding;

public class SettingsFragment extends Fragment {
    private FragmentSettingsBinding binding;

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        requireActivity().getOnBackPressedDispatcher().addCallback(this, new OnBackPressedCallback(true) {
            @Override
            public void handleOnBackPressed() {
                navigateBack();
            }
        });
    }

    @Override
    public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        binding = FragmentSettingsBinding.inflate(inflater, container, false);
        return binding.getRoot();
    }

    @Override
    public void onViewCreated(@NonNull View view, Bundle savedInstanceState) {
        super.onViewCreated(view, savedInstanceState);
        setupToolbar();
        setupListeners();
        setupMenu();
    }

    private void setupToolbar() {
        if (getActivity() instanceof AppCompatActivity) {
            ActionBar actionBar = ((AppCompatActivity) getActivity()).getSupportActionBar();
            if (actionBar != null) {
                actionBar.setTitle(R.string.title_settings);
                actionBar.setDisplayHomeAsUpEnabled(true);
            }
        }
    }

    private void setupMenu() {
        requireActivity().addMenuProvider(new MenuProvider() {
            @Override
            public void onCreateMenu(@NonNull Menu menu, @NonNull MenuInflater menuInflater) {
                // Se hai un menu specifico per le impostazioni, inflalo qui
            }

            @Override
            public boolean onMenuItemSelected(@NonNull MenuItem menuItem) {
                if (menuItem.getItemId() == android.R.id.home) {
                    navigateBack();
                    return true;
                }
                return false;
            }
        }, getViewLifecycleOwner(), Lifecycle.State.RESUMED);
    }

    private void navigateBack() {
        NavController navController = Navigation.findNavController(requireView());
        navController.navigateUp();
    }

    private void setupListeners() {
        binding.btnRicorrenze.setOnClickListener(v -> navigateToRicorrenzeSettings());
        binding.btnGenerali.setOnClickListener(v -> navigateToGeneralSettings());
        binding.btnAccount.setOnClickListener(v -> navigateToAccountSettings());
        binding.btnImpegni.setOnClickListener(v -> navigateToImpegniSettings());
        binding.btnListeSpesa.setOnClickListener(v -> navigateToListeSpesaSettings());
        binding.btnNotifiche.setOnClickListener(v -> navigateToNotificheSettings());
        binding.btnIntegrazioni.setOnClickListener(v -> navigateToIntegrazioniSettings());
        binding.btnPrivacySicurezza.setOnClickListener(v -> navigateToPrivacySicurezzaSettings());
        binding.btnSupportoInfo.setOnClickListener(v -> navigateToSupportoInfoSettings());
    }

    private void navigateToRicorrenzeSettings() {
        List<SettingItem> ricorrenzeSettings = new ArrayList<>();
        ricorrenzeSettings.add(new SettingItem("Gestione Ricorrenze", "Aggiungi, modifica o elimina ricorrenze", R.id.action_categorySettingsFragment_to_manageRicorrenzeFragment));
        ricorrenzeSettings.add(new SettingItem("Visualizzazione", "Imposta le preferenze di visualizzazione", R.id.action_categorySettingsFragment_to_ricorrenzeVisualizationSettingsFragment));
        ricorrenzeSettings.add(new SettingItem("Notifiche Ricorrenze", "Attiva o disattiva le notifiche", true ));
        ricorrenzeSettings.add(new SettingItem("Sincronizzazione calendario", "Sincronizza con calendari esterni"));

        SettingItem[] settingItemsArray = ricorrenzeSettings.toArray(new SettingItem[0]);

        navigateToCategorySettings("Impostazioni Ricorrenze", settingItemsArray);
    }

    private void navigateToGeneralSettings() {
        List<SettingItem> generalSettings = new ArrayList<>();
        generalSettings.add(new SettingItem("Tema", "Seleziona il tema dell'app"));
        generalSettings.add(new SettingItem("Lingua", "Scegli la lingua dell'app"));
        generalSettings.add(new SettingItem("Notifiche", "Gestisci le notifiche push"));
        generalSettings.add(new SettingItem("Font e dimensione del testo", "Personalizza il carattere e la dimensione"));
        generalSettings.add(new SettingItem("Sincronizzazione", "Opzioni per sincronizzare i dati" ));
        generalSettings.add(new SettingItem("Backup e ripristino", "Gestisci backup e ripristino dei dati"));

        SettingItem[] settingItemsArray = generalSettings.toArray(new SettingItem[0]);

        navigateToCategorySettings("Impostazioni Generali", settingItemsArray);
    }

    private void navigateToAccountSettings() {
        List<SettingItem> accountSettings = new ArrayList<>();
        accountSettings.add(new SettingItem("Profilo utente", "Modifica le informazioni personali" ));
        accountSettings.add(new SettingItem("Gestione account", "Collega o disconnetti account" ));
        accountSettings.add(new SettingItem("Cambio password", "Modifica la password o configura l'autenticazione" ));
        accountSettings.add(new SettingItem("Esporta dati", "Esporta le informazioni personali" ));
        accountSettings.add(new SettingItem("Elimina account", "Elimina definitivamente l'account" ));

        SettingItem[] settingItemsArray = accountSettings.toArray(new SettingItem[0]);

        navigateToCategorySettings("Impostazioni Account", settingItemsArray);
    }

    private void navigateToImpegniSettings() {
        List<SettingItem> impegniSettings = new ArrayList<>();
        impegniSettings.add(new SettingItem("Visualizzazione impegni", "Scegli il formato di visualizzazione" ));
        impegniSettings.add(new SettingItem("Promemoria per impegni", "Gestisci i promemoria" ));
        impegniSettings.add(new SettingItem("Categorie impegni", "Crea e gestisci categorie personalizzate" ));
        impegniSettings.add(new SettingItem("Condivisione", "Opzioni per condividere gli impegni" ));
        impegniSettings.add(new SettingItem("Durata predefinita", "Imposta una durata standard" ));

        SettingItem[] settingItemsArray = impegniSettings.toArray(new SettingItem[0]);

        navigateToCategorySettings("Impostazioni Impegni", settingItemsArray);
    }

    private void navigateToListeSpesaSettings() {
        List<SettingItem> listeSpesaSettings = new ArrayList<>();
        listeSpesaSettings.add(new SettingItem("Ordine della lista", "Scegli l'ordinamento della lista" ));
        listeSpesaSettings.add(new SettingItem("Suggerimenti intelligenti", "Attiva/disattiva i suggerimenti", true ));
        listeSpesaSettings.add(new SettingItem("Condivisione liste", "Opzioni per condividere le liste" ));
        listeSpesaSettings.add(new SettingItem("Salvataggio liste preferite", "Crea e salva liste ricorrenti" ));
        listeSpesaSettings.add(new SettingItem("Notifiche di promemoria", "Gestisci gli avvisi per le liste", true ));

        SettingItem[] settingItemsArray = listeSpesaSettings.toArray(new SettingItem[0]);

        navigateToCategorySettings("Impostazioni Liste Spesa", settingItemsArray);
    }

    private void navigateToNotificheSettings() {
        List<SettingItem> notificheSettings = new ArrayList<>();
        notificheSettings.add(new SettingItem("Notifiche per Ricorrenze", "Imposta le notifiche per eventi ricorrenti" ));
        notificheSettings.add(new SettingItem("Notifiche per Impegni", "Gestisci i promemoria per gli impegni" ));
        notificheSettings.add(new SettingItem("Notifiche silenziose", "Configura la modalità non disturbare" ));
        notificheSettings.add(new SettingItem("Snooze delle notifiche", "Opzioni per posticipare le notifiche" ));

        SettingItem[] settingItemsArray = notificheSettings.toArray(new SettingItem[0]);

        navigateToCategorySettings("Impostazioni Notifiche", settingItemsArray);
    }

    private void navigateToIntegrazioniSettings() {
        List<SettingItem> integrazioniSettings = new ArrayList<>();
        integrazioniSettings.add(new SettingItem("Integrazione con Calendari", "Collega calendari esterni" ));
        integrazioniSettings.add(new SettingItem("Integrazione con Assistenti Vocali", "Collega assistenti vocali" ));
        integrazioniSettings.add(new SettingItem("Integrazione con App di Terze Parti", "Collega app per la gestione delle attività" ));

        SettingItem[] settingItemsArray = integrazioniSettings.toArray(new SettingItem[0]);

        navigateToCategorySettings("Impostazioni Integrazioni", settingItemsArray);
    }

    private void navigateToPrivacySicurezzaSettings() {
        List<SettingItem> privacySicurezzaSettings = new ArrayList<>();
        privacySicurezzaSettings.add(new SettingItem("Blocco dell'app", "Attiva blocco con PIN o biometrico" ));
        privacySicurezzaSettings.add(new SettingItem("Permessi", "Gestisci i permessi dell'app" ));
        privacySicurezzaSettings.add(new SettingItem("Cronologia dati", "Visualizza e gestisci la cronologia" ));
        privacySicurezzaSettings.add(new SettingItem("Crittografia dati", "Abilita la crittografia per dati sensibili" ));

        SettingItem[] settingItemsArray = privacySicurezzaSettings.toArray(new SettingItem[0]);

        navigateToCategorySettings("Impostazioni Privacy & Sicurezza", settingItemsArray);
    }

    private void navigateToSupportoInfoSettings() {
        List<SettingItem> supportoInfoSettings = new ArrayList<>();
        supportoInfoSettings.add(new SettingItem("Contatti e Supporto", "Accedi all'assistenza" ));
        supportoInfoSettings.add(new SettingItem("Domande frequenti (FAQ)", "Visualizza le domande comuni" ));
        supportoInfoSettings.add(new SettingItem("Versione dell'app", "Informazioni sulla versione" ));
        supportoInfoSettings.add(new SettingItem("Feedback", "Invia feedback o suggerimenti" ));

        SettingItem[] settingItemsArray = supportoInfoSettings.toArray(new SettingItem[0]);

        navigateToCategorySettings("info & SUpporto", settingItemsArray);
    }

    private void navigateToCategorySettings(String categoryTitle, SettingItem[] settingItems) {
        try {
            SettingsFragmentDirections.ActionSettingsFragmentToCategorySettingsFragment action =
                    SettingsFragmentDirections.actionSettingsFragmentToCategorySettingsFragment(
                            categoryTitle,
                            settingItems
                    );
            Navigation.findNavController(requireView()).navigate(action);
        } catch (Exception e) {
            Log.e("SettingsFragment", "Errore nella navigazione con Safe Args: " + e.getMessage());
            navigateToCategorySettingsFallback(categoryTitle, settingItems);
        }
    }

    private void navigateToCategorySettingsFallback(String categoryTitle, SettingItem[] settingItems) {
        Bundle args = new Bundle();
        args.putString("categoryTitle", categoryTitle);
        args.putParcelableArray("settingItems", settingItems);

        NavController navController = Navigation.findNavController(requireView());
        navController.navigate(R.id.action_settingsFragment_to_categorySettingsFragment, args);
    }

    @Override
    public void onDestroyView() {
        super.onDestroyView();
        binding = null;
    }
}

// Contenuto di navigation/nav_graph.xml

<?xml version="1.0" encoding="utf-8"?>
<navigation xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:id="@+id/nav_graph"
    app:startDestination="@id/navigation_home">

    <!-- Frammenti esistenti -->
    <fragment
        android:id="@+id/navigation_home"
        android:name="it.faustobe.santibailor.presentation.features.home.HomeFragment"
        android:label="@string/title_home"
        tools:layout="@layout/fragment_home">
        <argument
            android:name="ricorrenzaId"
            app:argType="integer" />
        <action
            android:id="@+id/action_homeFragment_to_ricorrenzaDetailFragment"
            app:destination="@id/ricorrenzaDetailFragment" />
    </fragment>

    <fragment
        android:id="@+id/navigation_dashboard"
        android:name="it.faustobe.santibailor.presentation.features.dashboard.DashboardFragment"
        android:label="@string/title_dashboard"
        tools:layout="@layout/fragment_dashboard" />

    <fragment
        android:id="@+id/navigation_notifications"
        android:name="it.faustobe.santibailor.presentation.features.notifications.NotificationsFragment"
        android:label="@string/title_notifications"
        tools:layout="@layout/fragment_notifications" />

    <!-- Fragment Impostazioni modificato -->
    <fragment
        android:id="@+id/navigation_settings"
        android:name="it.faustobe.santibailor.presentation.features.settings.SettingsFragment"
        android:label="Impostazioni"
        tools:layout="@layout/fragment_settings">
        <action
            android:id="@+id/action_settingsFragment_to_addItemFragment"
            app:destination="@id/addItemFragment" />
        <action
            android:id="@+id/action_settingsFragment_to_searchFragment"
            app:destination="@id/searchFragment" />
        <action
            android:id="@+id/action_settingsFragment_to_categorySettingsFragment"
            app:destination="@id/categorySettingsFragment" />
    </fragment>

    <fragment
        android:id="@+id/ricorrenzaDetailFragment"
        android:name="it.faustobe.santibailor.presentation.features.ricorrenza.RicorrenzaDetailFragment"
        android:label="Dettaglio Ricorrenza"
        tools:layout="@layout/fragment_ricorrenza_detail">
        <argument
            android:name="ricorrenzaId"
            app:argType="integer" />
        <action
            android:id="@+id/action_ricorrenzaDetailFragment_to_editRicorrenzaFragment"
            app:destination="@id/editRicorrenzaFragment" />
    </fragment>

    <fragment
        android:id="@+id/editRicorrenzaFragment"
        android:name="it.faustobe.santibailor.presentation.common.ricorrenze.EditRicorrenzaFragment"
        android:label="Modifica Ricorrenza"
        tools:layout="@layout/fragment_edit_ricorrenza">
        <argument
            android:name="ricorrenzaId"
            app:argType="integer" />
        <action
            android:id="@+id/action_editRicorrenzaFragment_to_navigation_home"
            app:destination="@id/navigation_home"
            app:popUpTo="@id/navigation_home"
            app:popUpToInclusive="true" />
    </fragment>

    <fragment
        android:id="@+id/categorySettingsFragment"
        android:name="it.faustobe.santibailor.presentation.features.settings.CategorySettingsFragment"
        android:label="Impostazioni Categoria"
        tools:layout="@layout/fragment_category_settings">
        <argument
            android:name="categoryTitle"
            app:argType="string" />

        <argument
            android:name="settingItems"
            app:argType="it.faustobe.santibailor.presentation.features.settings.SettingItem[]"
            app:nullable="true"/>
        <action
            android:id="@+id/action_categorySettingsFragment_to_manageRicorrenzeFragment"
            app:destination="@id/manageRicorrenzeFragment" />
        <action
            android:id="@+id/action_categorySettingsFragment_to_ricorrenzeVisualizationSettingsFragment"
            app:destination="@id/ricorrenzeVisualizationSettingsFragment" />
        <action
            android:id="@+id/action_categorySettingsFragment_to_navigation_settings"
            app:destination="@id/navigation_settings"
            app:popUpTo="@id/navigation_settings"
            app:popUpToInclusive="true" />
    </fragment>

    <fragment
        android:id="@+id/testFragment"
        android:name="it.faustobe.santibailor.presentation.features.test.TestFragment"
        android:label="Test Fragment"
        tools:layout="@layout/fragment_test">
        <argument
            android:name="testArg"
            app:argType="integer"
            android:defaultValue="0" />
    </fragment>

    <fragment
        android:id="@+id/manageRicorrenzeFragment"
        android:name="it.faustobe.santibailor.presentation.features.settings.ricorrenze.ManageRicorrenzeFragment"
        android:label="Gestione Ricorrenze"
        tools:layout="@layout/fragment_manage_ricorrenze">
        <action
            android:id="@+id/action_manageRicorrenzeFragment_to_addItemFragment"
            app:destination="@id/addItemFragment" />
        <action
            android:id="@+id/action_manageRicorrenzeFragment_to_searchFragment"
            app:destination="@id/searchFragment" />
    </fragment>

    <fragment
        android:id="@+id/ricorrenzeVisualizationSettingsFragment"
        android:name="it.faustobe.santibailor.presentation.features.settings.ricorrenze.RicorrenzeVisualizationSettingsFragment"
        android:label="Visualizzazione Ricorrenze"
        tools:layout="@layout/fragment_ricorrenze_visualization_settings" />

    <!-- Altri frammenti esistenti -->
    <fragment
        android:id="@+id/searchFragment"
        android:name="it.faustobe.santibailor.presentation.features.search.SearchFragment"
        android:label="Ricerca Avanzata"
        tools:layout="@layout/fragment_search" >
        <action
            android:id="@+id/action_searchFragment_to_editRicorrenzaFragment"
            app:destination="@id/editRicorrenzaFragment" />
    </fragment>

    <fragment
        android:id="@+id/addItemFragment"
        android:name="it.faustobe.santibailor.presentation.features.add.AddItemFragment"
        android:label="Aggiungi elemento"
        tools:layout="@layout/fragment_add_item">
        <argument
            android:name="itemType"
            app:argType="string" />
        <action
            android:id="@+id/action_addItemFragment_to_navigation_home"
            app:destination="@id/navigation_home"
            app:popUpTo="@id/navigation_home"
            app:popUpToInclusive="true" />
        <action
            android:id="@+id/action_addItemFragment_to_navigation_settings"
            app:destination="@id/navigation_settings"
            app:popUpTo="@id/navigation_settings"
            app:popUpToInclusive="true" />
    </fragment>

    <action
        android:id="@+id/action_global_navigation_home"
        app:destination="@id/navigation_home"
        app:popUpTo="@id/navigation_home"
        app:popUpToInclusive="true" />

</navigation>

