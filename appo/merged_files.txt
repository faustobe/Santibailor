// File creato il: 2024-08-10 17:54:10

// Contenuto di home/HomeFragment.java

package it.faustobe.santibailor.ui.home;

import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.fragment.app.Fragment;
import androidx.lifecycle.ViewModelProvider;
import androidx.lifecycle.ViewModel;
import androidx.navigation.Navigation;
import androidx.recyclerview.widget.LinearLayoutManager;

import com.bumptech.glide.Glide;
import com.bumptech.glide.load.resource.drawable.DrawableTransitionOptions;
import com.google.android.material.bottomnavigation.BottomNavigationView;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Locale;

import it.faustobe.santibailor.R;
import it.faustobe.santibailor.databinding.FragmentHomeBinding;
import it.faustobe.santibailor.viewmodel.RicorrenzaViewModel;

public class HomeFragment extends Fragment {

    private FragmentHomeBinding binding;
    private RicorrenzaViewModel ricorrenzaViewModel;
    private RicorrenzaAdapter ricorrenzaAdapter;

    @Override
    public void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        ricorrenzaViewModel = new ViewModelProvider(this).get(RicorrenzaViewModel.class);
    }

    public View onCreateView(@NonNull LayoutInflater inflater,
                             ViewGroup container, Bundle savedInstanceState) {
        binding = FragmentHomeBinding.inflate(inflater, container, false);
        View root = binding.getRoot();

        ricorrenzaViewModel = new ViewModelProvider(this, new ViewModelProvider.AndroidViewModelFactory(requireActivity().getApplication())).get(RicorrenzaViewModel.class);

        setupDateDisplay();
        setupSaintOfDay();
        setupPersonalInfo();
        setupBottomNavigation();
        setupRecyclerView();
        setupFab();

        return root;
    }

    private void loadBackgroundImage() {
        Glide.with(this)
                .load(R.drawable.background_saint)
                .transition(DrawableTransitionOptions.withCrossFade())
                .centerCrop()
                .into(binding.backgroundImage);
    }

    private void setupDateDisplay() {
        Calendar calendar = Calendar.getInstance();
        SimpleDateFormat weekdayFormat = new SimpleDateFormat("EEEE", Locale.ITALIAN);
        SimpleDateFormat monthFormat = new SimpleDateFormat("MMMM", Locale.ITALIAN);

        binding.tvWeekday.setText(weekdayFormat.format(calendar.getTime()));
        binding.tvDay.setText(String.valueOf(calendar.get(Calendar.DAY_OF_MONTH)));
        binding.tvMonth.setText(monthFormat.format(calendar.getTime()));
    }

    private void setupSaintOfDay() {
        ricorrenzaViewModel.getRicorrenzeDelGiorno().observe(getViewLifecycleOwner(), ricorrenze -> {
            if (ricorrenze != null && !ricorrenze.isEmpty()) {
                binding.tvSaintOfDay.setText(ricorrenze.get(0).ricorrenza.getNome());
            }
        });
    }

    private void setupPersonalInfo() {
        // Qui dovresti recuperare le informazioni personali dal tuo database o dalle preferenze
        binding.tvPersonalEvent.setText("compleanno di zia Rosina");

        StringBuilder todoList = new StringBuilder("- paga bolletta luce\n");
        todoList.append("- cambia filtro aria della cappa\n");
        todoList.append("- compra regalo per Denise - compleanno fra 5 gg\n");
        todoList.append("- finisci rapporto AZS - consegna fra 3 gg");
        binding.tvTodoList.setText(todoList.toString());

        StringBuilder todayEvents = new StringBuilder("oggi:\n");
        todayEvents.append("* gym\n");
        todayEvents.append("* ape con Chicca alle h 18\n");
        todayEvents.append("+ la ricotta è in frigo da 4 giorni");
        binding.tvTodayEvents.setText(todayEvents.toString());
    }

    private void setupBottomNavigation() {
        BottomNavigationView bottomNav = binding.bottomNavigation;
        bottomNav.setOnItemSelectedListener(item -> {
            // Gestisci la navigazione qui
            int itemId = item.getItemId();
            if (itemId == R.id.navigation_home) {
                // Già nella home, non fare nulla
                return true;
            } else if (itemId == R.id.navigation_dashboard) {
                // Naviga alla dashboard
                // Esempio: Navigation.findNavController(requireView()).navigate(R.id.action_home_to_dashboard);
                return true;
            } else if (itemId == R.id.navigation_notifications) {
                // Naviga alle notifiche
                // Esempio: Navigation.findNavController(requireView()).navigate(R.id.action_home_to_notifications);
                return true;
            }
            return false;
        });
    }

    private void setupRecyclerView() {
        ricorrenzaAdapter = new RicorrenzaAdapter();
        binding.recyclerViewRicorrenze.setLayoutManager(new LinearLayoutManager(getContext()));
        binding.recyclerViewRicorrenze.setAdapter(ricorrenzaAdapter);

        ricorrenzaViewModel.getRicorrenzeDelGiorno().observe(getViewLifecycleOwner(), ricorrenze -> {
            ricorrenzaAdapter.setRicorrenze(ricorrenze);
        });
    }

    private void setupFab() {
        binding.fabAddRicorrenza.setOnClickListener(view -> {
            Navigation.findNavController(view).navigate(R.id.action_homeFragment_to_editRicorrenzaFragment);
        });
    }

    @Override
    public void onDestroyView() {
        super.onDestroyView();
        binding = null;
    }
}

// Contenuto di home/EditRicorrenzaFragment.java

package it.faustobe.santibailor.ui.home;

import android.app.Activity;
import android.content.Intent;
import android.net.Uri;
import android.os.Bundle;
import android.provider.MediaStore;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.fragment.app.Fragment;
import androidx.lifecycle.ViewModelProvider;
import androidx.lifecycle.ViewModel;
import androidx.navigation.Navigation;

import com.bumptech.glide.Glide;

import it.faustobe.santibailor.R;
import it.faustobe.santibailor.data.entities.Ricorrenza;
import it.faustobe.santibailor.databinding.FragmentEditRicorrenzaBinding;
import it.faustobe.santibailor.viewmodel.RicorrenzaViewModel;

public class EditRicorrenzaFragment extends Fragment {

    private FragmentEditRicorrenzaBinding binding;
    private RicorrenzaViewModel ricorrenzaViewModel;
    private static final int PICK_IMAGE_REQUEST = 1;
    private Uri imageUri;
    private Ricorrenza ricorrenzaToEdit;

    @Override
    public void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        ricorrenzaViewModel = new ViewModelProvider(this).get(RicorrenzaViewModel.class);
    }

    @Nullable
    @Override
    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
        binding = FragmentEditRicorrenzaBinding.inflate(inflater, container, false);
        return binding.getRoot();
    }

    @Override
    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {
        super.onViewCreated(view, savedInstanceState);

        ricorrenzaViewModel = new ViewModelProvider(this, new ViewModelProvider.AndroidViewModelFactory(requireActivity().getApplication())).get(RicorrenzaViewModel.class);

        // Controlla se stiamo modificando una ricorrenza esistente
        if (getArguments() != null && getArguments().containsKey("ricorrenzaId")) {
            int ricorrenzaId = getArguments().getInt("ricorrenzaId");
            ricorrenzaViewModel.getRicorrenzaById(ricorrenzaId).observe(getViewLifecycleOwner(), ricorrenza -> {
                if (ricorrenza != null) {
                    ricorrenzaToEdit = ricorrenza;
                    populateFields(ricorrenza);
                }
            });
        }

        setupListeners();
    }

    private void setupListeners() {
        binding.btnCaricaImmagine.setOnClickListener(v -> openImageChooser());

        binding.btnSalva.setOnClickListener(v -> saveRicorrenza());
    }

    private void openImageChooser() {
        Intent intent = new Intent();
        intent.setType("image/*");
        intent.setAction(Intent.ACTION_GET_CONTENT);
        startActivityForResult(Intent.createChooser(intent, "Seleziona un'immagine"), PICK_IMAGE_REQUEST);
    }

    @Override
    public void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {
        super.onActivityResult(requestCode, resultCode, data);

        if (requestCode == PICK_IMAGE_REQUEST && resultCode == Activity.RESULT_OK && data != null && data.getData() != null) {
            imageUri = data.getData();
            Glide.with(this).load(imageUri).into(binding.ivImmagine);
        }
    }

    private void populateFields(Ricorrenza ricorrenza) {
        binding.etNome.setText(ricorrenza.getNome());
        binding.etGiorno.setText(String.valueOf(ricorrenza.getGiorno()));
        binding.etMese.setText(String.valueOf(ricorrenza.getIdMese()));
        binding.etTipo.setText(String.valueOf(ricorrenza.getTipoRicorrenzaId()));
        binding.etDescrizione.setText(ricorrenza.getBio());

        if (ricorrenza.getImageUrl() != null && !ricorrenza.getImageUrl().isEmpty()) {
            Glide.with(this).load(ricorrenza.getImageUrl()).into(binding.ivImmagine);
        }
    }

    private void saveRicorrenza() {
        String nome = binding.etNome.getText().toString().trim();
        String giornoStr = binding.etGiorno.getText().toString().trim();
        String meseStr = binding.etMese.getText().toString().trim();
        String tipoStr = binding.etTipo.getText().toString().trim();
        String descrizione = binding.etDescrizione.getText().toString().trim();

        if (nome.isEmpty() || giornoStr.isEmpty() || meseStr.isEmpty() || tipoStr.isEmpty()) {
            Toast.makeText(getContext(), "Per favore, compila tutti i campi obbligatori", Toast.LENGTH_SHORT).show();
            return;
        }

        int giorno = Integer.parseInt(giornoStr);
        int mese = Integer.parseInt(meseStr);
        int tipo = Integer.parseInt(tipoStr);

        Ricorrenza ricorrenza = (ricorrenzaToEdit != null) ? ricorrenzaToEdit : new Ricorrenza();
        ricorrenza.setNome(nome);
        ricorrenza.setGiorno(giorno);
        ricorrenza.setIdMese(mese);
        ricorrenza.setTipoRicorrenzaId(tipo);
        ricorrenza.setBio(descrizione);

        if (imageUri != null) {
            // Qui dovresti implementare la logica per salvare l'immagine e ottenere l'URL
            // Per ora, impostiamo semplicemente l'URI come stringa
            ricorrenza.setImageUrl(imageUri.toString());
        }

        if (ricorrenzaToEdit != null) {
            ricorrenzaViewModel.update(ricorrenza);
        } else {
            ricorrenzaViewModel.insert(ricorrenza);
        }

        // Torna alla schermata precedente
        Navigation.findNavController(requireView()).navigateUp();
    }

    @Override
    public void onDestroyView() {
        super.onDestroyView();
        binding = null;
    }
}


// Contenuto di viewmodel/RicorrenzaViewModel.java

package it.faustobe.santibailor.viewmodel;

import android.app.Application;
import androidx.lifecycle.AndroidViewModel;
import androidx.lifecycle.LiveData;
import androidx.lifecycle.MutableLiveData;
import androidx.lifecycle.Transformations;
import androidx.lifecycle.ViewModel;
import androidx.lifecycle.ViewModelProvider;

import java.util.Calendar;
import java.util.Date;
import java.util.List;

import it.faustobe.santibailor.data.entities.Ricorrenza;
import it.faustobe.santibailor.data.entities.RicorrenzaConTipo;
import it.faustobe.santibailor.data.repository.RicorrenzaRepository;

public class RicorrenzaViewModel extends AndroidViewModel {
    private RicorrenzaRepository repository;
    private final MutableLiveData<Date> selectedDate = new MutableLiveData<>();
    private final LiveData<List<RicorrenzaConTipo>> ricorrenzeDelGiorno;
    private final LiveData<List<RicorrenzaConTipo>> ricorrenzeReligiose;
    private final LiveData<List<RicorrenzaConTipo>> ricorrenzeLaiche;

    public RicorrenzaViewModel(Application application) {
        super(application);
        repository = new RicorrenzaRepository(application);
        selectedDate.setValue(new Date());

        ricorrenzeDelGiorno = Transformations.switchMap(selectedDate, date -> {
            Calendar cal = Calendar.getInstance();
            cal.setTime(date);
            int giorno = cal.get(Calendar.DAY_OF_MONTH);
            int mese = cal.get(Calendar.MONTH) + 1;
            return repository.getRicorrenzeDelGiorno(giorno, mese);
        });

        ricorrenzeReligiose = Transformations.switchMap(selectedDate, date -> {
            Calendar cal = Calendar.getInstance();
            cal.setTime(date);
            int giorno = cal.get(Calendar.DAY_OF_MONTH);
            int mese = cal.get(Calendar.MONTH) + 1;
            return repository.getRicorrenzeReligiose(giorno, mese);
        });

        ricorrenzeLaiche = Transformations.switchMap(selectedDate, date -> {
            Calendar cal = Calendar.getInstance();
            cal.setTime(date);
            int giorno = cal.get(Calendar.DAY_OF_MONTH);
            int mese = cal.get(Calendar.MONTH) + 1;
            return repository.getRicorrenzeLaiche(giorno, mese);
        });
    }

    public void setDate(Date date) {
        selectedDate.setValue(date);
    }

    public LiveData<Date> getSelectedDate() {
        return selectedDate;
    }

    public LiveData<List<RicorrenzaConTipo>> getRicorrenzeDelGiorno() {
        return ricorrenzeDelGiorno;
    }

    public LiveData<List<RicorrenzaConTipo>> getRicorrenzeReligiose() {
        return ricorrenzeReligiose;
    }

    public LiveData<List<RicorrenzaConTipo>> getRicorrenzeLaiche() {
        return ricorrenzeLaiche;
    }

    public void moveToNextDay() {
        Date currentDate = selectedDate.getValue();
        Calendar calendar = Calendar.getInstance();
        calendar.setTime(currentDate);
        calendar.add(Calendar.DAY_OF_MONTH, 1);
        selectedDate.setValue(calendar.getTime());
    }

    public void moveToPreviousDay() {
        Date currentDate = selectedDate.getValue();
        Calendar calendar = Calendar.getInstance();
        calendar.setTime(currentDate);
        calendar.add(Calendar.DAY_OF_MONTH, -1);
        selectedDate.setValue(calendar.getTime());
    }

    // Nuovo metodo per inserire una ricorrenza
    public void insert(Ricorrenza ricorrenza) {
        repository.insert(ricorrenza);
    }

    // Nuovo metodo per aggiornare una ricorrenza
    public void update(Ricorrenza ricorrenza) {
        repository.update(ricorrenza);
    }

    // Nuovo metodo per ottenere una ricorrenza specifica per ID
    public LiveData<Ricorrenza> getRicorrenzaById(int id) {
        return repository.getRicorrenzaById(id);
    }

    public static class Factory implements ViewModelProvider.Factory {
        private Application mApplication;

        public Factory(Application application) {
            mApplication = application;
        }

        @Override
        public <T extends ViewModel> T create(Class<T> modelClass) {
            return (T) new RicorrenzaViewModel(mApplication);
        }
    }
}

